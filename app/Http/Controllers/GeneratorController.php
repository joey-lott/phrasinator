<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\RPL\TextImage;
use App\RPL\CompositeImage;

class GeneratorController extends Controller
{

    //
    public function __construct()
    {
        $this->middleware('auth');
    }

    public function generate(Request $request) {
      // $image = new TextImage($request->phrase, $request->fontName, $width, $heightRemaining);
      // $image->adjustFontToFillSpace();
      // $resources = $image->generateImageResources();
      // $path1 = "/images/".($path1);
      // $path2 = "/images/".($path2);
      // // $path2 = "/images/".($paths[1]);
      // return view("displayimages", ["path1" => $path1, "path2" => $path2]);

      $size = $request->size;
      $width = 3000;
      $height = 3000;
      if($size == "medium") {
        $width = 2000;
        $height = 2000;
      }
      else if($size == "small") {
        $width = 1500;
        $height = 1500;
      }
      $compositeDark = new CompositeImage($width, $height);
      $compositeLight = new CompositeImage($width, $height);
      // If image location was set to above or below (not none), try to grab the image
      if($request->imageLocation == "above" || $request->imageLocation == "below") {
          // If the pixabay image was selected from the grid of search results
          if(isset($request->pixabayImage)) {
            // Get the image from pixabay
            $compositeDark->fetchFromUrl($request->pixabayImage);
            $compositeLight->fetchFromUrl($request->pixabayImage);
          }
      }
      // This is how much height remains to fill in the composite image.
      // Only need to do this for one of the composites since both will report the same
      $heightRemaining = $compositeDark->fetchHeightRemaining();

      ini_set('max_execution_time', 60);
      // Set a default font size to -1 (which means ignore font size setting)
      // This is no longer used. Can probably delete next line. Comment for now.
      //$fontSize = isset($request->fontSize) ? $request->fontSize : -1;


      session(["phrase" => $request->phrase,
               "fontName" => $request->fontName,
               "size" => $request->size,
               "imageLocation" => $request->imageLocation,
               "imageUrl" => $request->pixabayImage]);

      // Generate the text image
      $image = new TextImage($request->phrase, $request->fontName, $width, $heightRemaining);
      $image->adjustFontToFillSpace();
      $resources = $image->generateImageResources();

      // Add the text images to the composite images. The language here is
      // confusing because the form asks for the *image* (i.e. pixabay image)
      // location relative to the text. But here, we are adding the text
      // to the composite. So if imageLocation is "above", call addBelow(),
      // and vice versa.
      if($request->imageLocation == "above") {
        $compositeDark->addBelow($resources["dark"]);
        $compositeLight->addBelow($resources["light"]);
      }
      else {
        $compositeDark->addAbove($resources["dark"]);
        $compositeLight->addAbove($resources["light"]);
      }
      // Set the transparency of the composite to the transparency generated by the text image
      $compositeDark->setTransparent($image->transparent);
      $path1 = $compositeDark->saveToDisk($request->phrase."_dark");
      $compositeLight->setTransparent($image->transparent);
      $path2 = $compositeLight->saveToDisk($request->phrase."_light");
//      $paths = $image->saveImages("{$request->phrase}");
      $path1 = "/images/".($path1);
      $path2 = "/images/".($path2);
      // $path2 = "/images/".($paths[1]);
      return view("displayimages", ["path1" => $path1, "path2" => $path2]);
    }

    public function form(Request $request) {
      if($request->clear == "now") {
        session()->forget("phrase");
        session()->forget("fontName");
        session()->forget("size");
        session()->forget("imageLocation");
        session()->forget("imageUrl");

      }
      $phrase = session()->has("phrase") ? session()->get("phrase") : "";
      $fontName = session()->has("fontName") ? session()->get("fontName") : "";
      $size = session()->has("size") ? session()->get("size") : "large";
      $imageLocation = session()->has("imageLocation") ? session()->get("imageLocation") : "";
      $imageUrl = session()->has("imageUrl") ? session()->get("imageUrl") : "";
      return view("formWithImageSelector", ["phrase" => $phrase, "fontName" => $fontName, "size" => $size,
      "imageLocation" => $imageLocation,
      "imageUrl" => $imageUrl]);
    }

}
